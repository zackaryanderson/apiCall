{"ast":null,"code":"import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign, __spreadArrays } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\nexport { equal as isEqual } from '@wry/equality';\n\nfunction isScalarValue(value) {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\n\nfunction isNumberValue(value) {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value) {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value) {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value) {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value) {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value) {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value) {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value) {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value) {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value) {\n  return value.kind === 'NullValue';\n}\n\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    var nestedArgObj_1 = {};\n    value.fields.map(function (obj) {\n      return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n    });\n    argObj[name.value] = nestedArgObj_1;\n  } else if (isVariable(value)) {\n    var variableValue = (variables || {})[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(function (listValue) {\n      var nestedArgArrayObj = {};\n      valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n      return nestedArgArrayObj[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(17) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" + 'is not supported. Use variables instead of inline arguments to ' + 'overcome this limitation.');\n  }\n}\n\nfunction storeKeyNameFromField(field, variables) {\n  var directivesObj = null;\n\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(function (directive) {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(function (_a) {\n          var name = _a.name,\n              value = _a.value;\n          return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n        });\n      }\n    });\n  }\n\n  var argObj = null;\n\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj, name, value, variables);\n    });\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nvar KNOWN_DIRECTIVES = ['connection', 'include', 'skip', 'client', 'rest', 'export'];\n\nfunction getStoreKeyName(fieldName, args, directives) {\n  if (directives && directives['connection'] && directives['connection']['key']) {\n    if (directives['connection']['filter'] && directives['connection']['filter'].length > 0) {\n      var filterKeys = directives['connection']['filter'] ? directives['connection']['filter'] : [];\n      filterKeys.sort();\n      var queryArgs_1 = args;\n      var filteredArgs_1 = {};\n      filterKeys.forEach(function (key) {\n        filteredArgs_1[key] = queryArgs_1[key];\n      });\n      return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  var completeFieldName = fieldName;\n\n  if (args) {\n    var stringifiedArgs = stringify(args);\n    completeFieldName += \"(\" + stringifiedArgs + \")\";\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(function (key) {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n      } else {\n        completeFieldName += \"@\" + key;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nfunction argumentsObjectFromField(field, variables) {\n  if (field.arguments && field.arguments.length) {\n    var argObj_1 = {};\n    field.arguments.forEach(function (_a) {\n      var name = _a.name,\n          value = _a.value;\n      return valueToObjectRepresentation(argObj_1, name, value, variables);\n    });\n    return argObj_1;\n  }\n\n  return null;\n}\n\nfunction resultKeyNameFromField(field) {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nfunction isField(selection) {\n  return selection.kind === 'Field';\n}\n\nfunction isInlineFragment(selection) {\n  return selection.kind === 'InlineFragment';\n}\n\nfunction isIdValue(idObject) {\n  return idObject && idObject.type === 'id' && typeof idObject.generated === 'boolean';\n}\n\nfunction toIdValue(idConfig, generated) {\n  if (generated === void 0) {\n    generated = false;\n  }\n\n  return __assign({\n    type: 'id',\n    generated: generated\n  }, typeof idConfig === 'string' ? {\n    id: idConfig,\n    typename: undefined\n  } : idConfig);\n}\n\nfunction isJsonValue(jsonObject) {\n  return jsonObject != null && typeof jsonObject === 'object' && jsonObject.type === 'json';\n}\n\nfunction defaultValueFromVariable(node) {\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(18) : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\n\nfunction valueFromNode(node, onVariable) {\n  if (onVariable === void 0) {\n    onVariable = defaultValueFromVariable;\n  }\n\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n\n    case 'NullValue':\n      return null;\n\n    case 'IntValue':\n      return parseInt(node.value, 10);\n\n    case 'FloatValue':\n      return parseFloat(node.value);\n\n    case 'ListValue':\n      return node.values.map(function (v) {\n        return valueFromNode(v, onVariable);\n      });\n\n    case 'ObjectValue':\n      {\n        var value = {};\n\n        for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n          var field = _a[_i];\n          value[field.name.value] = valueFromNode(field.value, onVariable);\n        }\n\n        return value;\n      }\n\n    default:\n      return node.value;\n  }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n  if (field.directives && field.directives.length) {\n    var directiveObj_1 = {};\n    field.directives.forEach(function (directive) {\n      directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n    });\n    return directiveObj_1;\n  }\n\n  return null;\n}\n\nfunction shouldInclude(selection, variables) {\n  if (variables === void 0) {\n    variables = {};\n  }\n\n  return getInclusionDirectives(selection.directives).every(function (_a) {\n    var directive = _a.directive,\n        ifArgument = _a.ifArgument;\n    var evaledValue = false;\n\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 13) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nfunction getDirectiveNames(doc) {\n  var names = [];\n  visit(doc, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\n\nfunction hasDirectives(names, doc) {\n  return getDirectiveNames(doc).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\n\nfunction hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\n\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\n\nfunction getInclusionDirectives(directives) {\n  return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n    var directiveArguments = directive.arguments;\n    var directiveName = directive.name.value;\n    process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 14) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n    var ifArgument = directiveArguments[0];\n    process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 15) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n    var ifValue = ifArgument.value;\n    process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 16) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n    return {\n      directive: directive,\n      ifArgument: ifArgument\n    };\n  }) : [];\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(11) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 12) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArrays([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n\n  return query;\n}\n\nfunction assign(target) {\n  var sources = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    sources[_i - 1] = arguments[_i];\n  }\n\n  sources.forEach(function (source) {\n    if (typeof source === 'undefined' || source === null) {\n      return;\n    }\n\n    Object.keys(source).forEach(function (key) {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}\n\nfunction getMutationDefinition(doc) {\n  checkDocument(doc);\n  var mutationDef = doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.operation === 'mutation';\n  })[0];\n  process.env.NODE_ENV === \"production\" ? invariant(mutationDef, 1) : invariant(mutationDef, 'Must contain a mutation definition.');\n  return mutationDef;\n}\n\nfunction checkDocument(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 2) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n\n    return definition;\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 4) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  return doc;\n}\n\nfunction getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\n\nfunction getOperationDefinitionOrDie(document) {\n  var def = getOperationDefinition(document);\n  process.env.NODE_ENV === \"production\" ? invariant(def, 5) : invariant(def, \"GraphQL document is missing an operation\");\n  return def;\n}\n\nfunction getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\n\nfunction getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\n\nfunction getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 6) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n  return queryDef;\n}\n\nfunction getFragmentDefinition(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 7) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 8) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n  var fragmentDef = doc.definitions[0];\n  process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 9) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n  return fragmentDef;\n}\n\nfunction getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(10) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\n\nfunction createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nfunction getDefaultValues(definition) {\n  if (definition && definition.variableDefinitions && definition.variableDefinitions.length) {\n    var defaultValues = definition.variableDefinitions.filter(function (_a) {\n      var defaultValue = _a.defaultValue;\n      return defaultValue;\n    }).map(function (_a) {\n      var variable = _a.variable,\n          defaultValue = _a.defaultValue;\n      var defaultValueObj = {};\n      valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n      return defaultValueObj;\n    });\n    return assign.apply(void 0, __spreadArrays([{}], defaultValues));\n  }\n\n  return {};\n}\n\nfunction variablesInOperation(operation) {\n  var names = new Set();\n\n  if (operation.variableDefinitions) {\n    for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n      var definition = _a[_i];\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}\n\nfunction filterInPlace(array, test, context) {\n  var target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\n\nfunction isEmpty(op, fragments) {\n  return op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);\n  });\n}\n\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\n\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\n\nfunction removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n\n  return modifiedDoc;\n}\n\nfunction addTypenameToDocument(doc) {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n\n        var selections = node.selections;\n\n        if (!selections) {\n          return;\n        }\n\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n\n        if (skip) {\n          return;\n        }\n\n        var field = parent;\n\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n\n        return __assign(__assign({}, node), {\n          selections: __spreadArrays(selections, [TYPENAME_FIELD])\n        });\n      }\n    }\n  });\n}\n\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n\n    return willRemove;\n  }\n};\n\nfunction removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\n\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  return selectionSet && selectionSet.selections && selectionSet.selections.some(function (selection) {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n}\n\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n  if (nestedCheck === void 0) {\n    nestedCheck = true;\n  }\n\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return selection.directives.some(getDirectiveMatcher(directives)) || nestedCheck && hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck);\n}\n\nfunction getDirectivesFromDocument(directives, doc) {\n  checkDocument(doc);\n  var parentPath;\n  return nullIfDocIsEmpty(visit(doc, {\n    SelectionSet: {\n      enter: function (node, _key, _parent, path) {\n        var currentPath = path.join('-');\n\n        if (!parentPath || currentPath === parentPath || !currentPath.startsWith(parentPath)) {\n          if (node.selections) {\n            var selectionsWithDirectives = node.selections.filter(function (selection) {\n              return hasDirectivesInSelection(directives, selection);\n            });\n\n            if (hasDirectivesInSelectionSet(directives, node, false)) {\n              parentPath = currentPath;\n            }\n\n            return __assign(__assign({}, node), {\n              selections: selectionsWithDirectives\n            });\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  }));\n}\n\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\n\nfunction removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          })\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n          node.arguments.forEach(function (arg) {\n            if (argMatcher(arg)) {\n              argMatchCount_1 += 1;\n            }\n          });\n\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\n\nfunction removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\n\nfunction buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n\n  if (definitionOperation === 'query') {\n    return document;\n  }\n\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\n\nfunction removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n\n  return modifiedDoc;\n}\n\nvar canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' && navigator.product === 'ReactNative');\nvar toString = Object.prototype.toString;\n\nfunction cloneDeep(value) {\n  return cloneDeepHelper(value, new Map());\n}\n\nfunction cloneDeepHelper(val, seen) {\n  switch (toString.call(val)) {\n    case \"[object Array]\":\n      {\n        if (seen.has(val)) return seen.get(val);\n        var copy_1 = val.slice(0);\n        seen.set(val, copy_1);\n        copy_1.forEach(function (child, i) {\n          copy_1[i] = cloneDeepHelper(child, seen);\n        });\n        return copy_1;\n      }\n\n    case \"[object Object]\":\n      {\n        if (seen.has(val)) return seen.get(val);\n        var copy_2 = Object.create(Object.getPrototypeOf(val));\n        seen.set(val, copy_2);\n        Object.keys(val).forEach(function (key) {\n          copy_2[key] = cloneDeepHelper(val[key], seen);\n        });\n        return copy_2;\n      }\n\n    default:\n      return val;\n  }\n}\n\nfunction getEnv() {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n\n  return 'development';\n}\n\nfunction isEnv(env) {\n  return getEnv() === env;\n}\n\nfunction isProduction() {\n  return isEnv('production') === true;\n}\n\nfunction isDevelopment() {\n  return isEnv('development') === true;\n}\n\nfunction isTest() {\n  return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\n\nfunction graphQLResultHasError(result) {\n  return result.errors && result.errors.length;\n}\n\nfunction deepFreeze(o) {\n  Object.freeze(o);\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (o[prop] !== null && (typeof o[prop] === 'object' || typeof o[prop] === 'function') && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  return o;\n}\n\nfunction maybeDeepFreeze(obj) {\n  if (isDevelopment() || isTest()) {\n    var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n\n  return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction mergeDeep() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return mergeDeepArray(sources);\n}\n\nfunction mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n\n  if (count > 1) {\n    var pastCopies = [];\n    target = shallowCopyForMerge(target, pastCopies);\n\n    for (var i = 1; i < count; ++i) {\n      target = mergeHelper(target, sources[i], pastCopies);\n    }\n  }\n\n  return target;\n}\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction mergeHelper(target, source, pastCopies) {\n  if (isObject(source) && isObject(target)) {\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n\n    Object.keys(source).forEach(function (sourceKey) {\n      var sourceValue = source[sourceKey];\n\n      if (hasOwnProperty.call(target, sourceKey)) {\n        var targetValue = target[sourceKey];\n\n        if (sourceValue !== targetValue) {\n          target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n        }\n      } else {\n        target[sourceKey] = sourceValue;\n      }\n    });\n    return target;\n  }\n\n  return source;\n}\n\nfunction shallowCopyForMerge(value, pastCopies) {\n  if (value !== null && typeof value === 'object' && pastCopies.indexOf(value) < 0) {\n    if (Array.isArray(value)) {\n      value = value.slice(0);\n    } else {\n      value = __assign({\n        __proto__: Object.getPrototypeOf(value)\n      }, value);\n    }\n\n    pastCopies.push(value);\n  }\n\n  return value;\n}\n\nvar haveWarned = Object.create({});\n\nfunction warnOnceInDevelopment(msg, type) {\n  if (type === void 0) {\n    type = 'warn';\n  }\n\n  if (!isProduction() && !haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.warn(msg);\n    }\n  }\n}\n\nfunction stripSymbols(data) {\n  return JSON.parse(JSON.stringify(data));\n}\n\nexport { addTypenameToDocument, argumentsObjectFromField, assign, buildQueryFromSelectionSet, canUseWeakMap, checkDocument, cloneDeep, createFragmentMap, getDefaultValues, getDirectiveInfoFromField, getDirectiveNames, getDirectivesFromDocument, getEnv, getFragmentDefinition, getFragmentDefinitions, getFragmentQueryDocument, getInclusionDirectives, getMainDefinition, getMutationDefinition, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getQueryDefinition, getStoreKeyName, graphQLResultHasError, hasClientExports, hasDirectives, isDevelopment, isEnv, isField, isIdValue, isInlineFragment, isJsonValue, isNumberValue, isProduction, isScalarValue, isTest, maybeDeepFreeze, mergeDeep, mergeDeepArray, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, stripSymbols, toIdValue, tryFunctionOrLogError, valueFromNode, valueToObjectRepresentation, variablesInOperation, warnOnceInDevelopment };","map":{"version":3,"mappings":"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","names":["isScalarValue","value","indexOf","kind","isNumberValue","isStringValue","isBooleanValue","isIntValue","isFloatValue","isVariable","isObjectValue","isListValue","isEnumValue","isNullValue","valueToObjectRepresentation","argObj","name","variables","Number","nestedArgObj_1","fields","map","obj","variableValue","values","nestedArgArrayObj","listValue","process","storeKeyNameFromField","field","directivesObj","directives","forEach","directive","arguments","_a","length","getStoreKeyName","KNOWN_DIRECTIVES","fieldName","args","filterKeys","sort","queryArgs_1","filteredArgs_1","key","JSON","stringify","completeFieldName","stringifiedArgs","Object","keys","argumentsObjectFromField","argObj_1","resultKeyNameFromField","alias","isField","selection","isInlineFragment","isIdValue","idObject","type","generated","toIdValue","idConfig","id","typename","undefined","isJsonValue","jsonObject","defaultValueFromVariable","node","valueFromNode","onVariable","parseInt","parseFloat","v","_i","getDirectiveInfoFromField","directiveObj_1","shouldInclude","getInclusionDirectives","every","ifArgument","evaledValue","invariant","getDirectiveNames","doc","names","visit","Directive","push","hasDirectives","some","hasClientExports","document","isInclusionDirective","filter","directiveArguments","directiveName","ifValue","getFragmentQueryDocument","fragmentName","actualFragmentName","fragments","definitions","definition","query","operation","selectionSet","selections","assign","target","sources","source","getMutationDefinition","checkDocument","mutationDef","operations","getOperationDefinition","getOperationDefinitionOrDie","def","getOperationName","x","getFragmentDefinitions","getQueryDefinition","queryDef","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","createFragmentMap","symTable","fragment","getDefaultValues","variableDefinitions","defaultValues","defaultValue","variable","defaultValueObj","__spreadArrays","variablesInOperation","Set","add","filterInPlace","array","test","context","elem","i","call","TYPENAME_FIELD","isEmpty","op","nullIfDocIsEmpty","getDirectiveMatcher","directiveMatcher","dir","removeDirectivesFromDocument","variablesInUse","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","Variable","enter","_key","parent","Field","shouldRemoveField","remove","arg","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","SelectionSet","skip","lastIndexOf","connectionRemoveConfig","willRemove","removeConnectionDirectiveFromDocument","hasDirectivesInSelectionSet","nestedCheck","hasDirectivesInSelection","getDirectivesFromDocument","parentPath","_parent","path","currentPath","join","startsWith","selectionsWithDirectives","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","OperationDefinition","varDef","argMatchCount_1","Argument","FragmentDefinition","allFragments","buildQueryFromSelectionSet","definitionOperation","removeClientSetsFromDocument","isTypenameOnly","canUseWeakMap","WeakMap","navigator","product","cloneDeep","cloneDeepHelper","Map","val","seen","toString","has","get","copy_1","slice","set","child","copy_2","getPrototypeOf","getEnv","env","NODE_ENV","isEnv","isProduction","isDevelopment","isTest","tryFunctionOrLogError","f","e","console","error","graphQLResultHasError","result","errors","deepFreeze","o","freeze","getOwnPropertyNames","prop","isFrozen","maybeDeepFreeze","symbolIsPolyfilled","Symbol","mergeDeep","mergeDeepArray","count","pastCopies","shallowCopyForMerge","mergeHelper","isObject","isExtensible","sourceValue","sourceKey","hasOwnProperty","targetValue","Array","isArray","__proto__","haveWarned","warnOnceInDevelopment","msg","warn","stripSymbols","data","parse"],"sources":["/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/storeUtils.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/directives.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/fragments.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/assign.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/getFromAST.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/filterInPlace.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/transform.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/canUse.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/cloneDeep.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/environment.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/errorHandling.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/maybeDeepFreeze.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/mergeDeep.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/warnOnce.ts","/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-utilities/src/util/stripSymbols.ts"],"sourcesContent":["import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n} from 'graphql';\n\nimport stringify from 'fast-json-stable-stringify';\nimport { InvariantError } from 'ts-invariant';\n\nexport interface IdValue {\n  type: 'id';\n  id: string;\n  generated: boolean;\n  typename: string | undefined;\n}\n\nexport interface JsonValue {\n  type: 'json';\n  json: any;\n}\n\nexport type ListValue = Array<null | IdValue>;\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | IdValue\n  | ListValue\n  | JsonValue\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport type ScalarValue = StringValueNode | BooleanValueNode | EnumValueNode;\n\nexport function isScalarValue(value: ValueNode): value is ScalarValue {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\n\nexport type NumberValue = IntValueNode | FloatValueNode;\n\nexport function isNumberValue(value: ValueNode): value is NumberValue {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new InvariantError(\n      `The inline argument \"${name.value}\" of kind \"${(value as any).kind}\"` +\n        'is not supported. Use variables instead of inline arguments to ' +\n        'overcome this limitation.',\n    );\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport function getStoreKeyName(\n  fieldName: string,\n  args?: Object,\n  directives?: Directives,\n): string {\n  if (\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const queryArgs = args as { [key: string]: any };\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = queryArgs[key];\n      });\n\n      return `${directives['connection']['key']}(${JSON.stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    // We can't use `JSON.stringify` here since it's non-deterministic,\n    // and can lead to different store key names being created even though\n    // the `args` object used during creation has the same properties/values.\n    const stringifiedArgs: string = stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${JSON.stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables: Object,\n): Object {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport function isIdValue(idObject: StoreValue): idObject is IdValue {\n  return idObject &&\n    (idObject as IdValue | JsonValue).type === 'id' &&\n    typeof (idObject as IdValue).generated === 'boolean';\n}\n\nexport type IdConfig = {\n  id: string;\n  typename: string | undefined;\n};\n\nexport function toIdValue(\n  idConfig: string | IdConfig,\n  generated = false,\n): IdValue {\n  return {\n    type: 'id',\n    generated,\n    ...(typeof idConfig === 'string'\n      ? { id: idConfig, typename: undefined }\n      : idConfig),\n  };\n}\n\nexport function isJsonValue(jsonObject: StoreValue): jsonObject is JsonValue {\n  return (\n    jsonObject != null &&\n    typeof jsonObject === 'object' &&\n    (jsonObject as IdValue | JsonValue).type === 'json'\n  );\n}\n\nfunction defaultValueFromVariable(node: VariableNode) {\n  throw new InvariantError(`Variable nodes are not supported by valueFromNode`);\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\nexport function valueFromNode(\n  node: ValueNode,\n  onVariable: VariableValue = defaultValueFromVariable,\n): any {\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value, 10);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'ListValue':\n      return node.values.map(v => valueFromNode(v, onVariable));\n    case 'ObjectValue': {\n      const value: { [key: string]: any } = {};\n      for (const field of node.fields) {\n        value[field.name.value] = valueFromNode(field.value, onVariable);\n      }\n      return value;\n    }\n    default:\n      return node.value;\n  }\n}\n","// Provides the methods that allow QueryManager to handle the `skip` and\n// `include` directives within GraphQL.\nimport {\n  FieldNode,\n  SelectionNode,\n  VariableNode,\n  BooleanValueNode,\n  DirectiveNode,\n  DocumentNode,\n  ArgumentNode,\n  ValueNode,\n} from 'graphql';\n\nimport { visit } from 'graphql/language/visitor';\n\nimport { invariant } from 'ts-invariant';\n\nimport { argumentsObjectFromField } from './storeUtils';\n\nexport type DirectiveInfo = {\n  [fieldName: string]: { [argName: string]: any };\n};\n\nexport function getDirectiveInfoFromField(\n  field: FieldNode,\n  variables: Object,\n): DirectiveInfo {\n  if (field.directives && field.directives.length) {\n    const directiveObj: DirectiveInfo = {};\n    field.directives.forEach((directive: DirectiveNode) => {\n      directiveObj[directive.name.value] = argumentsObjectFromField(\n        directive,\n        variables,\n      );\n    });\n    return directiveObj;\n  }\n  return null;\n}\n\nexport function shouldInclude(\n  selection: SelectionNode,\n  variables: { [name: string]: any } = {},\n): boolean {\n  return getInclusionDirectives(\n    selection.directives,\n  ).every(({ directive, ifArgument }) => {\n    let evaledValue: boolean = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables[(ifArgument.value as VariableNode).name.value];\n      invariant(\n        evaledValue !== void 0,\n        `Invalid variable referenced in @${directive.name.value} directive.`,\n      );\n    } else {\n      evaledValue = (ifArgument.value as BooleanValueNode).value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\n\nexport function getDirectiveNames(doc: DocumentNode) {\n  const names: string[] = [];\n\n  visit(doc, {\n    Directive(node) {\n      names.push(node.name.value);\n    },\n  });\n\n  return names;\n}\n\nexport function hasDirectives(names: string[], doc: DocumentNode) {\n  return getDirectiveNames(doc).some(\n    (name: string) => names.indexOf(name) > -1,\n  );\n}\n\nexport function hasClientExports(document: DocumentNode) {\n  return (\n    document &&\n    hasDirectives(['client'], document) &&\n    hasDirectives(['export'], document)\n  );\n}\n\nexport type InclusionDirectives = Array<{\n  directive: DirectiveNode;\n  ifArgument: ArgumentNode;\n}>;\n\nfunction isInclusionDirective({ name: { value } }: DirectiveNode): boolean {\n  return value === 'skip' || value === 'include';\n}\n\nexport function getInclusionDirectives(\n  directives: ReadonlyArray<DirectiveNode>,\n): InclusionDirectives {\n  return directives ? directives.filter(isInclusionDirective).map(directive => {\n    const directiveArguments = directive.arguments;\n    const directiveName = directive.name.value;\n\n    invariant(\n      directiveArguments && directiveArguments.length === 1,\n      `Incorrect number of arguments for the @${directiveName} directive.`,\n    );\n\n    const ifArgument = directiveArguments[0];\n    invariant(\n      ifArgument.name && ifArgument.name.value === 'if',\n      `Invalid argument for the @${directiveName} directive.`,\n    );\n\n    const ifValue: ValueNode = ifArgument.value;\n\n    // means it has to be a variable value if this is a valid @skip or @include directive\n    invariant(\n      ifValue &&\n        (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'),\n      `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\n    );\n\n    return { directive, ifArgument };\n  }) : [];\n}\n\n","import { DocumentNode, FragmentDefinitionNode } from 'graphql';\nimport { invariant, InvariantError } from 'ts-invariant';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n","/**\n * Adds the properties of one or more source objects to a target object. Works exactly like\n * `Object.assign`, but as a utility to maintain support for IE 11.\n *\n * @see https://github.com/apollostack/apollo-client/pull/1009\n */\nexport function assign<A, B>(a: A, b: B): A & B;\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\nexport function assign<A, B, C, D, E>(\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n): A & B & C & D & E;\nexport function assign(target: any, ...sources: Array<any>): any;\nexport function assign(\n  target: { [key: string]: any },\n  ...sources: Array<{ [key: string]: any }>\n): { [key: string]: any } {\n  sources.forEach(source => {\n    if (typeof source === 'undefined' || source === null) {\n      return;\n    }\n    Object.keys(source).forEach(key => {\n      target[key] = source[key];\n    });\n  });\n  return target;\n}\n","import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { assign } from './util/assign';\n\nimport { valueToObjectRepresentation, JsonValue } from './storeUtils';\n\nexport function getMutationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode {\n  checkDocument(doc);\n\n  let mutationDef: OperationDefinitionNode | null = doc.definitions.filter(\n    definition =>\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'mutation',\n  )[0] as OperationDefinitionNode;\n\n  invariant(mutationDef, 'Must contain a mutation definition.');\n\n  return mutationDef;\n}\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  invariant(\n    doc && doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new InvariantError(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  invariant(\n    operations.length <= 1,\n    `Ambiguous GraphQL document: contains ${operations.length} operations`,\n  );\n\n  return doc;\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationDefinitionOrDie(\n  document: DocumentNode,\n): OperationDefinitionNode {\n  const def = getOperationDefinition(document);\n  invariant(def, `GraphQL document is missing an operation`);\n  return def;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  invariant(\n    queryDef && queryDef.operation === 'query',\n    'Must contain a query definition.',\n  );\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  invariant(\n    doc.kind === 'Document',\n    `Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`,\n  );\n\n  invariant(\n    doc.definitions.length <= 1,\n    'Fragment must have exactly one definition.',\n  );\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  invariant(\n    fragmentDef.kind === 'FragmentDefinition',\n    'Must be a fragment definition.',\n  );\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new InvariantError(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n\n  return symTable;\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): { [key: string]: JsonValue } {\n  if (\n    definition &&\n    definition.variableDefinitions &&\n    definition.variableDefinitions.length\n  ) {\n    const defaultValues = definition.variableDefinitions\n      .filter(({ defaultValue }) => defaultValue)\n      .map(\n        ({ variable, defaultValue }): { [key: string]: JsonValue } => {\n          const defaultValueObj: { [key: string]: JsonValue } = {};\n          valueToObjectRepresentation(\n            defaultValueObj,\n            variable.name,\n            defaultValue as ValueNode,\n          );\n\n          return defaultValueObj;\n        },\n      );\n\n    return assign({}, ...defaultValues);\n  }\n\n  return {};\n}\n\n/**\n * Returns the names of all variables declared by the operation.\n */\nexport function variablesInOperation(\n  operation: OperationDefinitionNode,\n): Set<string> {\n  const names = new Set<string>();\n  if (operation.variableDefinitions) {\n    for (const definition of operation.variableDefinitions) {\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}\n","export function filterInPlace<T>(\n  array: T[],\n  test: (elem: T) => boolean,\n  context?: any,\n): T[] {\n  let target = 0;\n  array.forEach(function (elem, i) {\n    if (test.call(this, elem, i, array)) {\n      array[target++] = elem;\n    }\n  }, context);\n  array.length = target;\n  return array;\n}\n","import {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n  ArgumentNode,\n  FragmentSpreadNode,\n  VariableDefinitionNode,\n  VariableNode,\n} from 'graphql';\nimport { visit } from 'graphql/language/visitor';\n\nimport {\n  checkDocument,\n  getOperationDefinition,\n  getFragmentDefinition,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n  getMainDefinition,\n} from './getFromAST';\nimport { filterInPlace } from './util/filterInPlace';\nimport { invariant } from 'ts-invariant';\nimport { isField, isInlineFragment } from './storeUtils';\n\nexport type RemoveNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n  remove?: boolean;\n};\n\nexport type GetNodeConfig<N> = {\n  name?: string;\n  test?: (node: N) => boolean;\n};\n\nexport type RemoveDirectiveConfig = RemoveNodeConfig<DirectiveNode>;\nexport type GetDirectiveConfig = GetNodeConfig<DirectiveNode>;\nexport type RemoveArgumentsConfig = RemoveNodeConfig<ArgumentNode>;\nexport type GetFragmentSpreadConfig = GetNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentSpreadConfig = RemoveNodeConfig<FragmentSpreadNode>;\nexport type RemoveFragmentDefinitionConfig = RemoveNodeConfig<\n  FragmentDefinitionNode\n>;\nexport type RemoveVariableDefinitionConfig = RemoveNodeConfig<\n  VariableDefinitionNode\n>;\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename',\n  },\n};\n\nfunction isEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): boolean {\n  return op.selectionSet.selections.every(\n    selection =>\n      selection.kind === 'FragmentSpread' &&\n      isEmpty(fragments[selection.name.value], fragments),\n  );\n}\n\nfunction nullIfDocIsEmpty(doc: DocumentNode) {\n  return isEmpty(\n    getOperationDefinition(doc) || getFragmentDefinition(doc),\n    createFragmentMap(getFragmentDefinitions(doc)),\n  )\n    ? null\n    : doc;\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode) {\n    return directives.some(\n      dir =>\n        (dir.name && dir.name === directive.name.value) ||\n        (dir.test && dir.test(directive)),\n    );\n  };\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const variablesInUse: Record<string, boolean> = Object.create(null);\n  let variablesToRemove: RemoveArgumentsConfig[] = [];\n\n  const fragmentSpreadsInUse: Record<string, boolean> = Object.create(null);\n  let fragmentSpreadsToRemove: RemoveFragmentSpreadConfig[] = [];\n\n  let modifiedDoc = nullIfDocIsEmpty(\n    visit(doc, {\n      Variable: {\n        enter(node, _key, parent) {\n          // Store each variable that's referenced as part of an argument\n          // (excluding operation definition variables), so we know which\n          // variables are being used. If we later want to remove a variable\n          // we'll fist check to see if it's being used, before continuing with\n          // the removal.\n          if (\n            (parent as VariableDefinitionNode).kind !== 'VariableDefinition'\n          ) {\n            variablesInUse[node.name.value] = true;\n          }\n        },\n      },\n\n      Field: {\n        enter(node) {\n          if (directives && node.directives) {\n            // If `remove` is set to true for a directive, and a directive match\n            // is found for a field, remove the field as well.\n            const shouldRemoveField = directives.some(\n              directive => directive.remove,\n            );\n\n            if (\n              shouldRemoveField &&\n              node.directives &&\n              node.directives.some(getDirectiveMatcher(directives))\n            ) {\n              if (node.arguments) {\n                // Store field argument variables so they can be removed\n                // from the operation definition.\n                node.arguments.forEach(arg => {\n                  if (arg.value.kind === 'Variable') {\n                    variablesToRemove.push({\n                      name: (arg.value as VariableNode).name.value,\n                    });\n                  }\n                });\n              }\n\n              if (node.selectionSet) {\n                // Store fragment spread names so they can be removed from the\n                // docuemnt.\n                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(\n                  frag => {\n                    fragmentSpreadsToRemove.push({\n                      name: frag.name.value,\n                    });\n                  },\n                );\n              }\n\n              // Remove the field.\n              return null;\n            }\n          }\n        },\n      },\n\n      FragmentSpread: {\n        enter(node) {\n          // Keep track of referenced fragment spreads. This is used to\n          // determine if top level fragment definitions should be removed.\n          fragmentSpreadsInUse[node.name.value] = true;\n        },\n      },\n\n      Directive: {\n        enter(node) {\n          // If a matching directive is found, remove it.\n          if (getDirectiveMatcher(directives)(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n\n  // If we've removed fields with arguments, make sure the associated\n  // variables are also removed from the rest of the document, as long as they\n  // aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(variablesToRemove, v => !variablesInUse[v.name]).length\n  ) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n\n  // If we've removed selection sets with fragment spreads, make sure the\n  // associated fragment definitions are also removed from the rest of the\n  // document, as long as they aren't being used elsewhere.\n  if (\n    modifiedDoc &&\n    filterInPlace(fragmentSpreadsToRemove, fs => !fragmentSpreadsInUse[fs.name])\n      .length\n  ) {\n    modifiedDoc = removeFragmentSpreadFromDocument(\n      fragmentSpreadsToRemove,\n      modifiedDoc,\n    );\n  }\n\n  return modifiedDoc;\n}\n\nexport function addTypenameToDocument(doc: DocumentNode): DocumentNode {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter(node, _key, parent) {\n        // Don't add __typename to OperationDefinitions.\n        if (\n          parent &&\n          (parent as OperationDefinitionNode).kind === 'OperationDefinition'\n        ) {\n          return;\n        }\n\n        // No changes if no selections.\n        const { selections } = node;\n        if (!selections) {\n          return;\n        }\n\n        // If selections already have a __typename, or are part of an\n        // introspection query, do nothing.\n        const skip = selections.some(selection => {\n          return (\n            isField(selection) &&\n            (selection.name.value === '__typename' ||\n              selection.name.value.lastIndexOf('__', 0) === 0)\n          );\n        });\n        if (skip) {\n          return;\n        }\n\n        // If this SelectionSet is @export-ed as an input variable, it should\n        // not have a __typename field (see issue #4691).\n        const field = parent as FieldNode;\n        if (\n          isField(field) &&\n          field.directives &&\n          field.directives.some(d => d.name.value === 'export')\n        ) {\n          return;\n        }\n\n        // Create and return a new SelectionSet with a __typename Field.\n        return {\n          ...node,\n          selections: [...selections, TYPENAME_FIELD],\n        };\n      },\n    },\n  });\n}\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        invariant.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\n\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  return removeDirectivesFromDocument(\n    [connectionRemoveConfig],\n    checkDocument(doc),\n  );\n}\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n  nestedCheck = true,\n): boolean {\n  return (\n    selectionSet &&\n    selectionSet.selections &&\n    selectionSet.selections.some(selection =>\n      hasDirectivesInSelection(directives, selection, nestedCheck),\n    )\n  );\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (!isField(selection)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n\n  return (\n    selection.directives.some(getDirectiveMatcher(directives)) ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nexport function getDirectivesFromDocument(\n  directives: GetDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  checkDocument(doc);\n\n  let parentPath: string;\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      SelectionSet: {\n        enter(node, _key, _parent, path) {\n          const currentPath = path.join('-');\n\n          if (\n            !parentPath ||\n            currentPath === parentPath ||\n            !currentPath.startsWith(parentPath)\n          ) {\n            if (node.selections) {\n              const selectionsWithDirectives = node.selections.filter(\n                selection => hasDirectivesInSelection(directives, selection),\n              );\n\n              if (hasDirectivesInSelectionSet(directives, node, false)) {\n                parentPath = currentPath;\n              }\n\n              return {\n                ...node,\n                selections: selectionsWithDirectives,\n              };\n            } else {\n              return null;\n            }\n          }\n        },\n      },\n    }),\n  );\n}\n\nfunction getArgumentMatcher(config: RemoveArgumentsConfig[]) {\n  return function argumentMatcher(argument: ArgumentNode) {\n    return config.some(\n      (aConfig: RemoveArgumentsConfig) =>\n        argument.value &&\n        argument.value.kind === 'Variable' &&\n        argument.value.name &&\n        (aConfig.name === argument.value.name.value ||\n          (aConfig.test && aConfig.test(argument))),\n    );\n  };\n}\n\nexport function removeArgumentsFromDocument(\n  config: RemoveArgumentsConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  const argMatcher = getArgumentMatcher(config);\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      OperationDefinition: {\n        enter(node) {\n          return {\n            ...node,\n            // Remove matching top level variables definitions.\n            variableDefinitions: node.variableDefinitions.filter(\n              varDef =>\n                !config.some(arg => arg.name === varDef.variable.name.value),\n            ),\n          };\n        },\n      },\n\n      Field: {\n        enter(node) {\n          // If `remove` is set to true for an argument, and an argument match\n          // is found for a field, remove the field as well.\n          const shouldRemoveField = config.some(argConfig => argConfig.remove);\n\n          if (shouldRemoveField) {\n            let argMatchCount = 0;\n            node.arguments.forEach(arg => {\n              if (argMatcher(arg)) {\n                argMatchCount += 1;\n              }\n            });\n            if (argMatchCount === 1) {\n              return null;\n            }\n          }\n        },\n      },\n\n      Argument: {\n        enter(node) {\n          // Remove all matching arguments.\n          if (argMatcher(node)) {\n            return null;\n          }\n        },\n      },\n    }),\n  );\n}\n\nexport function removeFragmentSpreadFromDocument(\n  config: RemoveFragmentSpreadConfig[],\n  doc: DocumentNode,\n): DocumentNode {\n  function enter(\n    node: FragmentSpreadNode | FragmentDefinitionNode,\n  ): null | void {\n    if (config.some(def => def.name === node.name.value)) {\n      return null;\n    }\n  }\n\n  return nullIfDocIsEmpty(\n    visit(doc, {\n      FragmentSpread: { enter },\n      FragmentDefinition: { enter },\n    }),\n  );\n}\n\nfunction getAllFragmentSpreadsFromSelectionSet(\n  selectionSet: SelectionSetNode,\n): FragmentSpreadNode[] {\n  const allFragments: FragmentSpreadNode[] = [];\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (isField(selection) || isInlineFragment(selection)) &&\n      selection.selectionSet\n    ) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(\n        frag => allFragments.push(frag),\n      );\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n\n  return allFragments;\n}\n\n// If the incoming document is a query, return it as is. Otherwise, build a\n// new document containing a query operation based on the selection set\n// of the previous main operation.\nexport function buildQueryFromSelectionSet(\n  document: DocumentNode,\n): DocumentNode {\n  const definition = getMainDefinition(document);\n  const definitionOperation = (<OperationDefinitionNode>definition).operation;\n\n  if (definitionOperation === 'query') {\n    // Already a query, so return the existing document.\n    return document;\n  }\n\n  // Build a new query using the selection set of the main operation.\n  const modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter(node) {\n        return {\n          ...node,\n          operation: 'query',\n        };\n      },\n    },\n  });\n  return modifiedDoc;\n}\n\n// Remove fields / selection sets that include an @client directive.\nexport function removeClientSetsFromDocument(\n  document: DocumentNode,\n): DocumentNode | null {\n  checkDocument(document);\n\n  let modifiedDoc = removeDirectivesFromDocument(\n    [\n      {\n        test: (directive: DirectiveNode) => directive.name.value === 'client',\n        remove: true,\n      },\n    ],\n    document,\n  );\n\n  // After a fragment definition has had its @client related document\n  // sets removed, if the only field it has left is a __typename field,\n  // remove the entire fragment operation to prevent it from being fired\n  // on the server.\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter(node) {\n          if (node.selectionSet) {\n            const isTypenameOnly = node.selectionSet.selections.every(\n              selection =>\n                isField(selection) && selection.name.value === '__typename',\n            );\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        },\n      },\n    });\n  }\n\n  return modifiedDoc;\n}\n","export const canUseWeakMap = typeof WeakMap === 'function' && !(\n  typeof navigator === 'object' &&\n  navigator.product === 'ReactNative'\n);\n","const { toString } = Object.prototype;\n\n/**\n * Deeply clones a value to create a new instance.\n */\nexport function cloneDeep<T>(value: T): T {\n  return cloneDeepHelper(value, new Map());\n}\n\nfunction cloneDeepHelper<T>(val: T, seen: Map<any, any>): T {\n  switch (toString.call(val)) {\n  case \"[object Array]\": {\n    if (seen.has(val)) return seen.get(val);\n    const copy: T & any[] = (val as any).slice(0);\n    seen.set(val, copy);\n    copy.forEach(function (child, i) {\n      copy[i] = cloneDeepHelper(child, seen);\n    });\n    return copy;\n  }\n\n  case \"[object Object]\": {\n    if (seen.has(val)) return seen.get(val);\n    // High fidelity polyfills of Object.create and Object.getPrototypeOf are\n    // possible in all JS environments, so we will assume they exist/work.\n    const copy = Object.create(Object.getPrototypeOf(val));\n    seen.set(val, copy);\n    Object.keys(val).forEach(key => {\n      copy[key] = cloneDeepHelper((val as any)[key], seen);\n    });\n    return copy;\n  }\n\n  default:\n    return val;\n  }\n}\n","export function getEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n\n  // default environment\n  return 'development';\n}\n\nexport function isEnv(env: string): boolean {\n  return getEnv() === env;\n}\n\nexport function isProduction(): boolean {\n  return isEnv('production') === true;\n}\n\nexport function isDevelopment(): boolean {\n  return isEnv('development') === true;\n}\n\nexport function isTest(): boolean {\n  return isEnv('test') === true;\n}\n","import { ExecutionResult } from 'graphql';\n\nexport function tryFunctionOrLogError(f: Function) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\n\nexport function graphQLResultHasError(result: ExecutionResult) {\n  return result.errors && result.errors.length;\n}\n","import { isDevelopment, isTest } from './environment';\n\n// Taken (mostly) from https://github.com/substack/deep-freeze to avoid\n// import hassles with rollup.\nfunction deepFreeze(o: any) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n\nexport function maybeDeepFreeze(obj: any) {\n  if (isDevelopment() || isTest()) {\n    // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n    // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n    const symbolIsPolyfilled =\n      typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n  return obj;\n}\n","const { hasOwnProperty } = Object.prototype;\n\n// These mergeDeep and mergeDeepArray utilities merge any number of objects\n// together, sharing as much memory as possible with the source objects, while\n// remaining careful to avoid modifying any source objects.\n\n// Logically, the return type of mergeDeep should be the intersection of\n// all the argument types. The binary call signature is by far the most\n// common, but we support 0- through 5-ary as well. After that, the\n// resulting type is just the inferred array element type. Note to nerds:\n// there is a more clever way of doing this that converts the tuple type\n// first to a union type (easy enough: T[number]) and then converts the\n// union to an intersection type using distributive conditional type\n// inference, but that approach has several fatal flaws (boolean becomes\n// true & false, and the inferred type ends up as unknown in many cases),\n// in addition to being nearly impossible to explain/understand.\nexport type TupleToIntersection<T extends any[]> =\n  T extends [infer A] ? A :\n  T extends [infer A, infer B] ? A & B :\n  T extends [infer A, infer B, infer C] ? A & B & C :\n  T extends [infer A, infer B, infer C, infer D] ? A & B & C & D :\n  T extends [infer A, infer B, infer C, infer D, infer E] ? A & B & C & D & E :\n  T extends (infer U)[] ? U : any;\n\nexport function mergeDeep<T extends any[]>(\n  ...sources: T\n): TupleToIntersection<T> {\n  return mergeDeepArray(sources);\n}\n\n// In almost any situation where you could succeed in getting the\n// TypeScript compiler to infer a tuple type for the sources array, you\n// could just use mergeDeep instead of mergeDeepArray, so instead of\n// trying to convert T[] to an intersection type we just infer the array\n// element type, which works perfectly when the sources array has a\n// consistent element type.\nexport function mergeDeepArray<T>(sources: T[]): T {\n  let target = sources[0] || {} as T;\n  const count = sources.length;\n  if (count > 1) {\n    const pastCopies: any[] = [];\n    target = shallowCopyForMerge(target, pastCopies);\n    for (let i = 1; i < count; ++i) {\n      target = mergeHelper(target, sources[i], pastCopies);\n    }\n  }\n  return target;\n}\n\nfunction isObject(obj: any): obj is Record<string | number, any> {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction mergeHelper(\n  target: any,\n  source: any,\n  pastCopies: any[],\n) {\n  if (isObject(source) && isObject(target)) {\n    // In case the target has been frozen, make an extensible copy so that\n    // we can merge properties into the copy.\n    if (Object.isExtensible && !Object.isExtensible(target)) {\n      target = shallowCopyForMerge(target, pastCopies);\n    }\n\n    Object.keys(source).forEach(sourceKey => {\n      const sourceValue = source[sourceKey];\n      if (hasOwnProperty.call(target, sourceKey)) {\n        const targetValue = target[sourceKey];\n        if (sourceValue !== targetValue) {\n          // When there is a key collision, we need to make a shallow copy of\n          // target[sourceKey] so the merge does not modify any source objects.\n          // To avoid making unnecessary copies, we use a simple array to track\n          // past copies, since it's safe to modify copies created earlier in\n          // the merge. We use an array for pastCopies instead of a Map or Set,\n          // since the number of copies should be relatively small, and some\n          // Map/Set polyfills modify their keys.\n          target[sourceKey] = mergeHelper(\n            shallowCopyForMerge(targetValue, pastCopies),\n            sourceValue,\n            pastCopies,\n          );\n        }\n      } else {\n        // If there is no collision, the target can safely share memory with\n        // the source, and the recursion can terminate here.\n        target[sourceKey] = sourceValue;\n      }\n    });\n\n    return target;\n  }\n\n  // If source (or target) is not an object, let source replace target.\n  return source;\n}\n\nfunction shallowCopyForMerge<T>(value: T, pastCopies: any[]): T {\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    pastCopies.indexOf(value) < 0\n  ) {\n    if (Array.isArray(value)) {\n      value = (value as any).slice(0);\n    } else {\n      value = {\n        __proto__: Object.getPrototypeOf(value),\n        ...value,\n      };\n    }\n    pastCopies.push(value);\n  }\n  return value;\n}\n","import { isProduction, isTest } from './environment';\n\nconst haveWarned = Object.create({});\n\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\nexport function warnOnceInDevelopment(msg: string, type = 'warn') {\n  if (!isProduction() && !haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.warn(msg);\n    }\n  }\n}\n","/**\n * In order to make assertions easier, this function strips `symbol`'s from\n * the incoming data.\n *\n * This can be handy when running tests against `apollo-client` for example,\n * since it adds `symbol`'s to the data in the store. Jest's `toEqual`\n * function now covers `symbol`'s (https://github.com/facebook/jest/pull/3437),\n * which means all test data used in a `toEqual` comparison would also have to\n * include `symbol`'s, to pass. By stripping `symbol`'s from the cache data\n * we can compare against more simplified test data.\n */\nexport function stripSymbols<T>(data: T): T {\n  return JSON.parse(JSON.stringify(data));\n}\n"]},"metadata":{},"sourceType":"module"}