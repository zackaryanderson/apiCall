{"ast":null,"code":"var _jsxFileName = \"/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/src/Pages/RecipePage.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useStoreContext } from '../utils/GlobalState';\nimport { UPDATE_CURRENT_RECIPE } from '../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipePage() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  //get recipeID from the URL\n  let recipeID = window.location.href.split('/').slice(-1);\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentRecipe\n  } = state; //set up API call\n\n  let apiKey = \"b0c7f65173eb4810a62bd72e96c8563f\";\n  let call = \"https://api.spoonacular.com/recipes/\" + recipeID + \"/information?includeNutrition=false&apiKey=\" + apiKey;\n  let recipeInfo = [];\n\n  async function GetRecipeInfo(call) {\n    _s();\n\n    let response = await fetch(call);\n    recipeInfo = await response.json();\n    console.log(recipeInfo); //set currentRecipe in state to the returned recipeinfo\n\n    useEffect(() => {\n      if (currentRecipe) {\n        dispatch({\n          type: UPDATE_CURRENT_RECIPE,\n          recipe: recipeInfo\n        });\n      }\n    }, [recipeInfo, dispatch]);\n  } //update this to only do the function call if the recipeID from the window does not match the apiID currently in the 'currentRecipe' in state\n\n\n  _s(GetRecipeInfo, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  if (state.currentRecipe.id != recipeID) {\n    window.onload = function () {\n      GetRecipeInfo(call);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !recipeInfo ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: recipeInfo.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(RecipePage, \"qZ9GHftpIX86+oMFVfpp6r+956w=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RecipePage;\nexport default RecipePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"names":["React","useEffect","useStoreContext","UPDATE_CURRENT_RECIPE","RecipePage","recipeID","window","location","href","split","slice","state","dispatch","currentRecipe","apiKey","call","recipeInfo","GetRecipeInfo","response","fetch","json","console","log","type","recipe","id","onload","title"],"sources":["/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/src/Pages/RecipePage.js"],"sourcesContent":["import React, { useEffect }  from 'react';\nimport { useStoreContext } from '../utils/GlobalState';\nimport { UPDATE_CURRENT_RECIPE } from '../utils/actions';\n\n\nfunction RecipePage() {\n\n    //get recipeID from the URL\n    let recipeID = window.location.href.split('/').slice(-1);\n\n    const [state, dispatch] = useStoreContext();\n    const { currentRecipe } = state;\n\n    //set up API call\n    let apiKey = \"b0c7f65173eb4810a62bd72e96c8563f\";\n    let call = \"https://api.spoonacular.com/recipes/\"+ recipeID + \"/information?includeNutrition=false&apiKey=\" + apiKey;\n    let recipeInfo = [];\n\n    async function GetRecipeInfo (call) {\n        let response = await fetch (call);\n        recipeInfo = await response.json();\n        console.log(recipeInfo);\n\n        //set currentRecipe in state to the returned recipeinfo\n        useEffect(() => {\n            if (currentRecipe) {\n                dispatch({\n                    type: UPDATE_CURRENT_RECIPE,\n                    recipe: recipeInfo\n                });\n            }\n        }, [recipeInfo,dispatch]);\n    }\n\n    //update this to only do the function call if the recipeID from the window does not match the apiID currently in the 'currentRecipe' in state\n    if (state.currentRecipe.id != recipeID) {\n        window.onload = function () {\n            GetRecipeInfo(call);\n        };\n    }\n\n    return(\n\n        <div>\n            {!recipeInfo ? \n\n                (<h2>Loading...</h2>)\n                :\n                (\n                    <h2>{recipeInfo.title}</h2>\n                )\n            }\n        </div>\n\n    );\n\n\n}\n\n\nexport default RecipePage;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,qBAAT,QAAsC,kBAAtC;;;AAGA,SAASC,UAAT,GAAsB;EAAA;;EAAA;;EAElB;EACA,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,CAAC,CAAvC,CAAf;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,eAAe,EAAzC;EACA,MAAM;IAAEW;EAAF,IAAoBF,KAA1B,CANkB,CAQlB;;EACA,IAAIG,MAAM,GAAG,kCAAb;EACA,IAAIC,IAAI,GAAG,yCAAwCV,QAAxC,GAAmD,6CAAnD,GAAmGS,MAA9G;EACA,IAAIE,UAAU,GAAG,EAAjB;;EAEA,eAAeC,aAAf,CAA8BF,IAA9B,EAAoC;IAAA;;IAChC,IAAIG,QAAQ,GAAG,MAAMC,KAAK,CAAEJ,IAAF,CAA1B;IACAC,UAAU,GAAG,MAAME,QAAQ,CAACE,IAAT,EAAnB;IACAC,OAAO,CAACC,GAAR,CAAYN,UAAZ,EAHgC,CAKhC;;IACAf,SAAS,CAAC,MAAM;MACZ,IAAIY,aAAJ,EAAmB;QACfD,QAAQ,CAAC;UACLW,IAAI,EAAEpB,qBADD;UAELqB,MAAM,EAAER;QAFH,CAAD,CAAR;MAIH;IACJ,CAPQ,EAON,CAACA,UAAD,EAAYJ,QAAZ,CAPM,CAAT;EAQH,CA3BiB,CA6BlB;;;EA7BkB,GAaHK,aAbG;;EA8BlB,IAAIN,KAAK,CAACE,aAAN,CAAoBY,EAApB,IAA0BpB,QAA9B,EAAwC;IACpCC,MAAM,CAACoB,MAAP,GAAgB,YAAY;MACxBT,aAAa,CAACF,IAAD,CAAb;IACH,CAFD;EAGH;;EAED,oBAEI;IAAA,UACK,CAACC,UAAD,gBAEI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,gBAKO;MAAA,UAAKA,UAAU,CAACW;IAAhB;MAAA;MAAA;MAAA;IAAA;EANZ;IAAA;IAAA;IAAA;EAAA,QAFJ;AAgBH;;IApDQvB,U;UAKqBF,e;;;KALrBE,U;AAuDT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}