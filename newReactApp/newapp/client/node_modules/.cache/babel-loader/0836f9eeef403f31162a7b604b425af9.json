{"ast":null,"code":"var _jsxFileName = \"/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/src/Pages/RecipePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useStoreContext } from '../utils/GlobalState';\nimport { UPDATE_CURRENT_RECIPE } from '../utils/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipePage() {\n  _s();\n\n  //get recipeID from the URL\n  let recipeID = window.location.href.split('/').slice(-1).toString();\n  let recipeInfo = {};\n  const [state, dispatch] = useStoreContext();\n  const {\n    currentRecipe\n  } = state; //set up API call\n\n  let apiKey = \"b0c7f65173eb4810a62bd72e96c8563f\";\n  let call = \"https://api.spoonacular.com/recipes/\" + recipeID + \"/information?includeNutrition=false&apiKey=\" + apiKey;\n\n  async function GetRecipeInfo(call) {\n    let response = await fetch(call);\n    recipeInfo = await response.json();\n    console.log(recipeInfo);\n    dispatch({\n      type: UPDATE_CURRENT_RECIPE,\n      currentRecipe: recipeInfo\n    });\n  } //update this to only do the function call if the recipeID from the window does not match the apiID currently in the 'currentRecipe' in state\n\n\n  if (state.currentRecipe.id != recipeID) {\n    window.onload = function () {\n      GetRecipeInfo(call);\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !recipeInfo ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [currentRecipe.title, \" (Time to Cook: \", currentRecipe.readyInMinutes, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentRecipe.image,\n        alt: \"Recipe Image\",\n        height: 500,\n        width: 1000\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Ingredients:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this), currentRecipe.extendedIngredients.map(ingredient => {\n        return /*#__PURE__*/_jsxDEV(\"h6\", {\n          children: ingredient.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RecipePage, \"qZ9GHftpIX86+oMFVfpp6r+956w=\", false, function () {\n  return [useStoreContext];\n});\n\n_c = RecipePage;\nexport default RecipePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"names":["React","useEffect","useStoreContext","UPDATE_CURRENT_RECIPE","RecipePage","recipeID","window","location","href","split","slice","toString","recipeInfo","state","dispatch","currentRecipe","apiKey","call","GetRecipeInfo","response","fetch","json","console","log","type","id","onload","title","readyInMinutes","image","extendedIngredients","map","ingredient","name"],"sources":["/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/src/Pages/RecipePage.js"],"sourcesContent":["import React, { useEffect }  from 'react';\nimport { useStoreContext } from '../utils/GlobalState';\nimport { UPDATE_CURRENT_RECIPE } from '../utils/actions';\n\n\nfunction RecipePage() {\n\n    //get recipeID from the URL\n    let recipeID = window.location.href.split('/').slice(-1).toString();\n    let recipeInfo = {};\n\n    const [state, dispatch] = useStoreContext();\n    const { currentRecipe } = state;\n\n    //set up API call\n    let apiKey = \"b0c7f65173eb4810a62bd72e96c8563f\";\n    let call = \"https://api.spoonacular.com/recipes/\"+ recipeID + \"/information?includeNutrition=false&apiKey=\" + apiKey;\n\n    async function GetRecipeInfo (call) {\n        let response = await fetch (call);\n        recipeInfo = await response.json();\n        console.log(recipeInfo);\n\n        dispatch({\n            type: UPDATE_CURRENT_RECIPE,\n            currentRecipe: recipeInfo\n        });\n\n    }\n\n    //update this to only do the function call if the recipeID from the window does not match the apiID currently in the 'currentRecipe' in state\n    if (state.currentRecipe.id != recipeID) {\n        window.onload = function () {\n            GetRecipeInfo(call);\n        };\n    }\n\n    return(\n\n        <div>\n            {!recipeInfo ? \n\n                (<h2>Loading...</h2>)\n                :\n                (\n                    <div>\n                        <h2>{currentRecipe.title} (Time to Cook: {currentRecipe.readyInMinutes})</h2>\n                        <img src={currentRecipe.image} alt = \"Recipe Image\" height = {500} width = {1000} />\n                        <h4>Ingredients:</h4>\n                        {currentRecipe.extendedIngredients.map( ingredient => {\n                            return (\n                                <h6>\n                                    {ingredient.name}\n                                </h6>\n                            )\n                        })}            \n                    </div>\n                )\n            }\n        </div>\n\n    );\n\n\n}\n\n\nexport default RecipePage;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,qBAAT,QAAsC,kBAAtC;;;AAGA,SAASC,UAAT,GAAsB;EAAA;;EAElB;EACA,IAAIC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgCC,KAAhC,CAAsC,CAAC,CAAvC,EAA0CC,QAA1C,EAAf;EACA,IAAIC,UAAU,GAAG,EAAjB;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,eAAe,EAAzC;EACA,MAAM;IAAEa;EAAF,IAAoBF,KAA1B,CAPkB,CASlB;;EACA,IAAIG,MAAM,GAAG,kCAAb;EACA,IAAIC,IAAI,GAAG,yCAAwCZ,QAAxC,GAAmD,6CAAnD,GAAmGW,MAA9G;;EAEA,eAAeE,aAAf,CAA8BD,IAA9B,EAAoC;IAChC,IAAIE,QAAQ,GAAG,MAAMC,KAAK,CAAEH,IAAF,CAA1B;IACAL,UAAU,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAAnB;IACAC,OAAO,CAACC,GAAR,CAAYX,UAAZ;IAEAE,QAAQ,CAAC;MACLU,IAAI,EAAErB,qBADD;MAELY,aAAa,EAAEH;IAFV,CAAD,CAAR;EAKH,CAvBiB,CAyBlB;;;EACA,IAAIC,KAAK,CAACE,aAAN,CAAoBU,EAApB,IAA0BpB,QAA9B,EAAwC;IACpCC,MAAM,CAACoB,MAAP,GAAgB,YAAY;MACxBR,aAAa,CAACD,IAAD,CAAb;IACH,CAFD;EAGH;;EAED,oBAEI;IAAA,UACK,CAACL,UAAD,gBAEI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,gBAKO;MAAA,wBACI;QAAA,WAAKG,aAAa,CAACY,KAAnB,sBAA0CZ,aAAa,CAACa,cAAxD;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAK,GAAG,EAAEb,aAAa,CAACc,KAAxB;QAA+B,GAAG,EAAG,cAArC;QAAoD,MAAM,EAAI,GAA9D;QAAmE,KAAK,EAAI;MAA5E;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ,EAIKd,aAAa,CAACe,mBAAd,CAAkCC,GAAlC,CAAuCC,UAAU,IAAI;QAClD,oBACI;UAAA,UACKA,UAAU,CAACC;QADhB;UAAA;UAAA;UAAA;QAAA,QADJ;MAKH,CANA,CAJL;IAAA;MAAA;MAAA;MAAA;IAAA;EANZ;IAAA;IAAA;IAAA;EAAA,QAFJ;AA2BH;;GA3DQ7B,U;UAMqBF,e;;;KANrBE,U;AA8DT,eAAeA,UAAf"},"metadata":{},"sourceType":"module"}