{"ast":null,"code":"import { __extends } from 'tslib';\nimport ApolloClient__default from 'apollo-client';\nexport * from 'apollo-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport * from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nexport * from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nexport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nexport { default as gql } from 'graphql-tag';\nimport { invariant } from 'ts-invariant';\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version', 'resolvers', 'typeDefs', 'fragmentMatcher'];\n\nvar DefaultClient = function (_super) {\n  __extends(DefaultClient, _super);\n\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = this;\n\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n\n      if (diff.length > 0) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n\n    var request = config.request,\n        uri = config.uri,\n        credentials = config.credentials,\n        headers = config.headers,\n        fetch = config.fetch,\n        fetchOptions = config.fetchOptions,\n        clientState = config.clientState,\n        cacheRedirects = config.cacheRedirects,\n        errorCallback = config.onError,\n        name = config.name,\n        version = config.version,\n        resolvers = config.resolvers,\n        typeDefs = config.typeDefs,\n        fragmentMatcher = config.fragmentMatcher;\n    var cache = config.cache;\n    process.env.NODE_ENV === \"production\" ? invariant(!cache || !cacheRedirects, 1) : invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. When not providing `cache`, ' + 'configure the provided instance with `cacheRedirects` instead.');\n\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n          networkError = _a.networkError;\n\n      if (graphQLErrors) {\n        graphQLErrors.forEach(function (_a) {\n          var message = _a.message,\n              locations = _a.locations,\n              path = _a.path;\n          return process.env.NODE_ENV === \"production\" || invariant.warn(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n\n      if (networkError) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(function (x) {\n      return !!x;\n    }));\n    var activeResolvers = resolvers;\n    var activeTypeDefs = typeDefs;\n    var activeFragmentMatcher = fragmentMatcher;\n\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults\n        });\n      }\n\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    }\n\n    _this = _super.call(this, {\n      cache: cache,\n      link: link,\n      name: name,\n      version: version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher\n    }) || this;\n    return _this;\n  }\n\n  return DefaultClient;\n}(ApolloClient__default);\n\nexport default DefaultClient;","map":{"version":3,"mappings":"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","names":["PRESET_CONFIG_KEYS","__extends","config","diff","Object","keys","filter","indexOf","key","length","process","join","uri","credentials","headers","fetch","fetchOptions","clientState","cacheRedirects","errorCallback","name","version","resolvers","typeDefs","fragmentMatcher","NODE_ENV","invariant","cache","InMemoryCache","errorLink","onError","_a","graphQLErrors","networkError","forEach","message","locations","path","warn","requestHandler","request","ApolloLink","operation","forward","Observable","handle","Promise","resolve","then","oper","subscribe","next","observer","bind","error","complete","catch","unsubscribe","httpLink","HttpLink","link","from","x","activeResolvers","activeTypeDefs","activeFragmentMatcher","defaults","writeData","data","_this","ApolloClient"],"sources":["/Users/zan/Documents/CodingBootcamp/apiCall/newReactApp/newapp/client/node_modules/apollo-boost/src/index.ts"],"sourcesContent":["/* necessary for backward compat */\nexport * from 'apollo-client';\nexport * from 'apollo-link';\nexport * from 'apollo-cache-inmemory';\n\nimport { Operation, ApolloLink, Observable } from 'apollo-link';\nimport { HttpLink, UriFunction } from 'apollo-link-http';\nimport { onError, ErrorLink } from 'apollo-link-error';\nimport { ApolloCache } from 'apollo-cache';\nimport { InMemoryCache, CacheResolverMap } from 'apollo-cache-inmemory';\nimport gql from 'graphql-tag';\nimport ApolloClient, {\n  Resolvers,\n  LocalStateFragmentMatcher,\n} from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { invariant } from 'ts-invariant';\n\nexport { gql, HttpLink };\n\ntype ClientStateConfig = {\n  cache?: ApolloCache<any>;\n  defaults?: Record<string, any>;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: LocalStateFragmentMatcher;\n};\n\nexport interface PresetConfig {\n  request?: (operation: Operation) => Promise<void> | void;\n  uri?: string | UriFunction;\n  credentials?: string;\n  headers?: any;\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n  fetchOptions?: HttpLink.Options;\n  clientState?: ClientStateConfig;\n  onError?: ErrorLink.ErrorHandler;\n  cacheRedirects?: CacheResolverMap;\n  cache?: ApolloCache<any>;\n  name?: string;\n  version?: string;\n  resolvers?: Resolvers | Resolvers[];\n  typeDefs?: string | string[] | DocumentNode | DocumentNode[];\n  fragmentMatcher?: LocalStateFragmentMatcher;\n  assumeImmutableResults?: boolean;\n}\n\n// Yes, these are the exact same as the `PresetConfig` interface. We're\n// defining these again so they can be used to verify that valid config\n// options are being used in the `DefaultClient` constructor, for clients\n// that aren't using Typescript. This duplication is unfortunate, and at\n// some point can likely be adjusted so these items are inferred from\n// the `PresetConfig` interface using a Typescript transform at compilation\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\n// working properly, so this will have to be re-visited at some point.\n// For now, when updating the properties of the `PresetConfig` interface,\n// please also update this constant.\nconst PRESET_CONFIG_KEYS = [\n  'request',\n  'uri',\n  'credentials',\n  'headers',\n  'fetch',\n  'fetchOptions',\n  'clientState',\n  'onError',\n  'cacheRedirects',\n  'cache',\n  'name',\n  'version',\n  'resolvers',\n  'typeDefs',\n  'fragmentMatcher',\n];\n\nexport default class DefaultClient<TCache> extends ApolloClient<TCache> {\n  constructor(config: PresetConfig = {}) {\n    if (config) {\n      const diff = Object.keys(config).filter(\n        key => PRESET_CONFIG_KEYS.indexOf(key) === -1,\n      );\n\n      if (diff.length > 0) {\n        invariant.warn(\n          'ApolloBoost was initialized with unsupported options: ' +\n            `${diff.join(' ')}`,\n        );\n      }\n    }\n\n    const {\n      request,\n      uri,\n      credentials,\n      headers,\n      fetch,\n      fetchOptions,\n      clientState,\n      cacheRedirects,\n      onError: errorCallback,\n      name,\n      version,\n      resolvers,\n      typeDefs,\n      fragmentMatcher,\n    } = config;\n\n    let { cache } = config;\n\n    invariant(\n      !cache || !cacheRedirects,\n      'Incompatible cache configuration. When not providing `cache`, ' +\n        'configure the provided instance with `cacheRedirects` instead.',\n    );\n\n    if (!cache) {\n      cache = cacheRedirects\n        ? new InMemoryCache({ cacheRedirects })\n        : new InMemoryCache();\n    }\n\n    const errorLink = errorCallback\n      ? onError(errorCallback)\n      : onError(({ graphQLErrors, networkError }) => {\n          if (graphQLErrors) {\n            graphQLErrors.forEach(({ message, locations, path }) =>\n              // tslint:disable-next-line\n              invariant.warn(\n                `[GraphQL error]: Message: ${message}, Location: ` +\n                  `${locations}, Path: ${path}`,\n              ),\n            );\n          }\n          if (networkError) {\n            // tslint:disable-next-line\n            invariant.warn(`[Network error]: ${networkError}`);\n          }\n        });\n\n    const requestHandler = request\n      ? new ApolloLink(\n          (operation, forward) =>\n            new Observable(observer => {\n              let handle: any;\n              Promise.resolve(operation)\n                .then(oper => request(oper))\n                .then(() => {\n                  handle = forward(operation).subscribe({\n                    next: observer.next.bind(observer),\n                    error: observer.error.bind(observer),\n                    complete: observer.complete.bind(observer),\n                  });\n                })\n                .catch(observer.error.bind(observer));\n\n              return () => {\n                if (handle) {\n                  handle.unsubscribe();\n                }\n              };\n            }),\n        )\n      : false;\n\n    const httpLink = new HttpLink({\n      uri: uri || '/graphql',\n      fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {},\n    });\n\n    const link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(\n      x => !!x,\n    ) as ApolloLink[]);\n\n    let activeResolvers = resolvers;\n    let activeTypeDefs = typeDefs;\n    let activeFragmentMatcher = fragmentMatcher;\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults,\n        });\n      }\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    }\n\n    // super hacky, we will fix the types eventually\n    super({\n      cache,\n      link,\n      name,\n      version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher,\n    } as any);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}